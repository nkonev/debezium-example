# https://github.com/debezium/debezium-examples/tree/main/tutorial#using-postgres
version: '2'
services:
  kafka:
    image: apache/kafka:3.7.0
    restart: unless-stopped
    container_name: kafka
    hostname: kafka
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/var/lib/kafka:z
    environment:
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'INTERNAL://kafka:29092,PLAINTEXT_HOST://127.0.0.1:9092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:29093'
      KAFKA_LISTENERS: 'INTERNAL://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'INTERNAL'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: "/var/lib/kafka/data"
      # Replace CLUSTER_ID with a unique base64 UUID using "bin/kafka-storage.sh random-uuid" 
      # See https://docs.confluent.io/kafka/operations-tools/kafka-tools.html#kafka-storage-sh
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
        
  postgres:
    restart: unless-stopped
    container_name: postgres
    hostname: postgres
    image: debezium/example-postgres:2.5.2.Final
    ports:
     - 5432:5432
    volumes:
     - postgres_data:/var/lib/postgresql/data:z
    environment:
     - POSTGRES_USER=postgres
     - POSTGRES_PASSWORD=postgres

  connect:
    image: debezium/connect:2.5.2.Final
    restart: unless-stopped
    container_name: connect
    hostname: connect
    ports:
     - 8083:8083
    links:
     - kafka
     - postgres
    environment:
     - BOOTSTRAP_SERVERS=kafka:29092
     - GROUP_ID=1
     - CONFIG_STORAGE_TOPIC=my_connect_configs
     - OFFSET_STORAGE_TOPIC=my_connect_offsets
     - STATUS_STORAGE_TOPIC=my_connect_statuses
  
  create-debezium-connectors:
    image: curlimages/curl:8.6.0
    container_name: create-debezium-connectors
    hostname: create-debezium-connectors
    restart: on-failure
    volumes:
      - ./register-postgres.json:/opt/register-postgres.json:z
    entrypoint: ['/bin/sh', '-c']
    command: |
      "
      curl -i --connect-timeout 5 --max-time 5 -X POST -H 'Accept:application/json' -H  'Content-Type:application/json' http://connect:8083/connectors/ -d @/opt/register-postgres.json
      "
  clickhouse:
    image: clickhouse/clickhouse-server:24.2.2.71-alpine
    container_name: clickhouse
    hostname: clickhouse
    restart: unless-stopped
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - clickhouse_data:/var/lib/clickhouse:z
      - ./docker/clickhouse/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d:z
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
# For testing newer connector versions, unpack the connector archive into this
# directory and uncomment the lines below
#    volumes:
#     - ./debezium-connector-postgres:/kafka/connect/debezium-connector-postgres

volumes:
  postgres_data:
  kafka_data:
  clickhouse_data:
